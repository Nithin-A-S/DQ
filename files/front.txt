import React, { useState, useEffect } from 'react';
import './App.css';

const App = () => {
  const [tableList, setTableList] = useState([]);
  const [selectedTable, setSelectedTable] = useState('');
  const [schema, setSchema] = useState([]);
  const [expectations] = useState([
    "isEmail", "isAlphabet", "isNull", "isBlank", "isBoolean", "isDecimal", "isNegativeNumber", "isPositiveNumber", "isNumber", "isUnique"
  ]);

  // Fetch the list of tables on component mount
  useEffect(() => {
    fetch('http://127.0.0.1:5000/table-list')
      .then(response => response.json())
      .then(data => {
        setTableList(data.table);
        if (data.table.length > 0) {
          setSelectedTable(data.table[0]); // Automatically select the first table
        }
      })
      .catch(error => console.error('Error fetching table list:', error));
  }, []);

  // Fetch schema when a table is selected
  useEffect(() => {
    if (selectedTable) {
      fetch('http://127.0.0.1:5000/send-schema', {
        method: 'POST',  // Change to POST
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ table: selectedTable }),  // Send the selected table to the API
      })
        .then(response => response.json())
        .then(data => {
          setSchema(data.schema); // Update schema with the response
        })
        .catch(error => console.error('Error fetching schema:', error));
    }
  }, [selectedTable]);

  const handleTableChange = (event) => {
    setSelectedTable(event.target.value);
    console.log(event.target.value);
  };

  return (
    <div className="container">
      <h1>Data Quality UI</h1>

      <div className="step-header">
        <h2>Step 1: Select Tables</h2>
      </div>
      <div className="table-selection">
        <select value={selectedTable} onChange={handleTableChange}>
          {tableList.map((table, index) => (
            <option key={index} value={table}>
              {table}
            </option>
          ))}
        </select>
      </div>

      <div className="schema-section">
        <h2>Step 2: Default Rules</h2>
        <table>
          <thead>
            <tr>
              <th>Column Name</th>
              <th>Data Type</th>
              <th>Suggested Rules</th>
              <th>Map Rules</th>
            </tr>
          </thead>
          <tbody>
            {schema.length > 0 ? (
              schema.map((col, index) => (
                <tr key={index}>
                  <td>{col.column}</td>
                  <td>{col.type}</td>
                  <td>
                    {/* Simulated rules for each column */}
                    <span className="rule-tag">isEmail</span>
                    <span className="rule-tag">isNull</span>
                  </td>
                  <td>
                    {expectations.map((exp, expIndex) => (
                      <label key={expIndex} className="rule-checkbox">
                        <input type="checkbox" /> {exp}
                      </label>
                    ))}
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="4">No schema available</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="button-group">
        <button className="nav-button">Back</button>
        <button className="nav-button">Next</button>
      </div>
    </div>
  );
};

export default App;


version 2




import React, { useState, useEffect } from 'react';
import './App.css';
import CustomExp from './components/CustomExp';

const App = () => {
  const [tableList, setTableList] = useState([]);
  const [selectedTable, setSelectedTable] = useState('');
  const [schema, setSchema] = useState([]);
  const [expectations] = useState([
    "isEmail", "isAlphabet", "isNull", "isBlank", "isBoolean", "isDecimal", "isNegativeNumber", "isPositiveNumber", "isNumber", "isUnique"
  ]);
  const [selectedValidations, setSelectedValidations] = useState({}); // Store selected validations per column
  const [popupOpen, setPopupOpen] = useState(false); // Popup state
  const [selectedColumnForPopup, setSelectedColumnForPopup] = useState(''); // Column that opens the popup
  const [columnExpectations, setColumnExpectations] = useState({}); // Store expectations per column

  // Fetch the list of tables on component mount
  useEffect(() => {
    fetch('http://127.0.0.1:5000/table-list')
      .then(response => response.json())
      .then(data => {
        setTableList(data.table);
        if (data.table.length > 0) {
          setSelectedTable(data.table[0]); // Automatically select the first table
        }
      })
      .catch(error => console.error('Error fetching table list:', error));
  }, []);

  // Fetch schema when a table is selected
  useEffect(() => {
    if (selectedTable) {
      fetch('http://127.0.0.1:5000/send-schema', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ table: selectedTable }),
      })
        .then(response => response.json())
        .then(data => {
          setSchema(data.schema);
          const initialValidations = {};
          const initialExpectations = {};
          data.schema.forEach(col => {
            initialValidations[col.column] = []; // No default validations
            initialExpectations[col.column] = []; // No default expectations
          });
          setSelectedValidations(initialValidations);
          setColumnExpectations(initialExpectations);
        })
        .catch(error => console.error('Error fetching schema:', error));
    }
  }, [selectedTable]);

  // Handle checkbox toggle for each validation rule
  const handleValidationChange = (column, validation) => {
    setSelectedValidations(prevState => {
      const columnValidations = prevState[column] || [];
      if (columnValidations.includes(validation)) {
        return {
          ...prevState,
          [column]: columnValidations.filter(v => v !== validation)
        };
      } else {
        return {
          ...prevState,
          [column]: [...columnValidations, validation]
        };
      }
    });
  };

  // Handle "Next" button click
  const handleNextClick = () => {
    const validationData = schema
      .map(col => ({
        column: col.column,
        validations: selectedValidations[col.column] || [],
        expectations: columnExpectations[col.column] || [], // Include expectations in the request
      }))
      .filter(col => col.validations.length > 0 || col.expectations.length > 0); // Only send columns with data

    console.log('Validation and Expectations Data:', validationData);

    // Send the data to the backend
    // fetch('http://127.0.0.1:5000/validate_columns', {
    //   method: 'POST',
    //   headers: { 'Content-Type': 'application/json' },
    //   body: JSON.stringify(validationData),
    // })
    // .then(response => response.json())
    // .then(data => console.log('Submitted data:', data))
    // .catch(error => console.error('Error submitting data:', error));
  };

  const handleTableChange = (event) => {
    setSelectedTable(event.target.value);
  };

  // Handle opening the popup when "click" button is pressed
  const openPopup = (column) => {
    setSelectedColumnForPopup(column); // Store the column name to associate with expectations
    setPopupOpen(true);
  };

  // Store expectations from the popup into the respective column
  const savePopupExpectations = (expectations) => {
    setColumnExpectations(prevState => ({
      ...prevState,
      [selectedColumnForPopup]: expectations, // Save expectations for the specific column
    }));
  };

  return (
    <div className="container">
      <div className="step-header">
        <h2>Step 1: Select Tables</h2>
      </div>
      <div className="table-selection">
        <select value={selectedTable} onChange={handleTableChange}>
          {tableList.map((table, index) => (
            <option key={index} value={table}>
              {table}
            </option>
          ))}
        </select>
      </div>

      <div className="schema-section">
        <h2>Step 2: Default Rules</h2>
        <table>
          <thead>
            <tr>
              <th>Column Name</th>
              <th>Data Type</th>
              <th>Map Rules</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {schema.length > 0 ? (
              schema.map((col, index) => (
                <tr key={index}>
                  <td>{col.column}</td>
                  <td>{col.type}</td>
                  <td>
                    {expectations.map((exp, expIndex) => (
                      <label key={expIndex} className="rule-checkbox">
                        <input
                          type="checkbox"
                          checked={selectedValidations[col.column]?.includes(exp) || false}
                          onChange={() => handleValidationChange(col.column, exp)}
                        />
                        {exp}
                      </label>
                    ))}
                  </td>
                  <td>
                    <button onClick={() => openPopup(col.column)}>Click</button>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="4">No schema available</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      <div className="button-group">
        <button className="nav-button">Back</button>
        <button className="nav-button" onClick={handleNextClick}>Next</button>
      </div>

      {/* Popup Component */}
      <CustomExp
        trigger={popupOpen}
        setTrigger={setPopupOpen}
        saveExpectations={savePopupExpectations}
      />
    </div>
  );
};

export default App;


